/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: workload.proto */

#ifndef PROTOBUF_C_workload_2eproto__INCLUDED
#define PROTOBUF_C_workload_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _PbcWorkloadReq PbcWorkloadReq;
typedef struct _PbcWorkloadRsp PbcWorkloadRsp;


/* --- enums --- */


/* --- messages --- */

struct  _PbcWorkloadReq
{
  ProtobufCMessage base;
  uint32_t id;
};
#define PBC_WORKLOAD_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pbc_workload_req__descriptor) \
    , 0 }


struct  _PbcWorkloadRsp
{
  ProtobufCMessage base;
  uint32_t id;
  uint32_t video_cnt;
  uint64_t info_mem;
};
#define PBC_WORKLOAD_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pbc_workload_rsp__descriptor) \
    , 0, 0, 0 }


/* PbcWorkloadReq methods */
void   pbc_workload_req__init
                     (PbcWorkloadReq         *message);
size_t pbc_workload_req__get_packed_size
                     (const PbcWorkloadReq   *message);
size_t pbc_workload_req__pack
                     (const PbcWorkloadReq   *message,
                      uint8_t             *out);
size_t pbc_workload_req__pack_to_buffer
                     (const PbcWorkloadReq   *message,
                      ProtobufCBuffer     *buffer);
PbcWorkloadReq *
       pbc_workload_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pbc_workload_req__free_unpacked
                     (PbcWorkloadReq *message,
                      ProtobufCAllocator *allocator);
/* PbcWorkloadRsp methods */
void   pbc_workload_rsp__init
                     (PbcWorkloadRsp         *message);
size_t pbc_workload_rsp__get_packed_size
                     (const PbcWorkloadRsp   *message);
size_t pbc_workload_rsp__pack
                     (const PbcWorkloadRsp   *message,
                      uint8_t             *out);
size_t pbc_workload_rsp__pack_to_buffer
                     (const PbcWorkloadRsp   *message,
                      ProtobufCBuffer     *buffer);
PbcWorkloadRsp *
       pbc_workload_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pbc_workload_rsp__free_unpacked
                     (PbcWorkloadRsp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PbcWorkloadReq_Closure)
                 (const PbcWorkloadReq *message,
                  void *closure_data);
typedef void (*PbcWorkloadRsp_Closure)
                 (const PbcWorkloadRsp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor pbc_workload_req__descriptor;
extern const ProtobufCMessageDescriptor pbc_workload_rsp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_workload_2eproto__INCLUDED */
